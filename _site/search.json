[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bite-sized_workshop",
    "section": "",
    "text": "Episode 6: Financial Data Analysis with R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Rseries/Episode6.html",
    "href": "Rseries/Episode6.html",
    "title": "Episode 6: Financial Data Analysis with R",
    "section": "",
    "text": "In this series, we are going to explore the tidymodels approach in financial analysis. By the end of this session, you will learn how to:\n\nextract stock prices data from an online portal such as Yahoo Finance\nwrangling stock price data,\nperforming technical analysis using ,\nconduct performance analysis"
  },
  {
    "objectID": "Rseries/Episode6.html#overview",
    "href": "Rseries/Episode6.html#overview",
    "title": "Episode 6: Financial Data Analysis with R",
    "section": "",
    "text": "In this series, we are going to explore the tidymodels approach in financial analysis. By the end of this session, you will learn how to:\n\nextract stock prices data from an online portal such as Yahoo Finance\nwrangling stock price data,\nperforming technical analysis using ,\nconduct performance analysis"
  },
  {
    "objectID": "Rseries/Episode6.html#introducing-tidyquant",
    "href": "Rseries/Episode6.html#introducing-tidyquant",
    "title": "Episode 6: Financial Data Analysis with R",
    "section": "Introducing tidyquant",
    "text": "Introducing tidyquant\n\ntidyquant integrates the best resources for collecting and analyzing financial data, zoo, xts, quantmod, TTR, and PerformanceAnalytics, with the tidy data infrastructure of the tidyverse allowing for seamless interaction between each.\nWith tidyquant, we can now perform complete financial analyses using tidyverse framework."
  },
  {
    "objectID": "Rseries/Episode6.html#installing-and-laoding-the-r-packages-into-r-environment",
    "href": "Rseries/Episode6.html#installing-and-laoding-the-r-packages-into-r-environment",
    "title": "Episode 6: Financial Data Analysis with R",
    "section": "Installing and Laoding the R Packages into R Environment",
    "text": "Installing and Laoding the R Packages into R Environment\nIn this session, four R packages will be used. They are: tidyverse, tidyquant, timetk, knitr.\n\n\npacman::p_load(tidyquant, timetk,\n               tidyverse, knitr)"
  },
  {
    "objectID": "Rseries/Episode6.html#extracting-financial-data",
    "href": "Rseries/Episode6.html#extracting-financial-data",
    "title": "Episode 6: Financial Data Analysis with R",
    "section": "Extracting Financial Data",
    "text": "Extracting Financial Data\nData extraction is the starting point of any financial data analysis. tq_get() is specially designed for extracting quantitative financial data from the following online portals:\n\nYahoo Finance - Daily stock data\nFRED - Economic data\nQuandl - Economic, Energy, & Financial Data API\nTiingo - Financial API with sub-daily stock data and crypto-currency\nAlpha Vantage - Financial API with sub-daily, ForEx, and crypto-currency data\nBloomberg - Financial API. Paid account is required.\n\n\nImporting companies data\nFor the purpose of this hands-on exercise, we are interested to analyse the stock prices of six companies in Singapore. The companies and related information are provided in company.csv file.\nCode chunk below is used to important company.csv into R environment.\n\n\ncompany &lt;- read_csv(\"data/SGCompany.csv\")\n\nRows: 6 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Name, Symbol\ndbl (1): marketcap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncompany\n\n# A tibble: 6 × 3\n  Name                  Symbol    marketcap\n  &lt;chr&gt;                 &lt;chr&gt;         &lt;dbl&gt;\n1 DBS Group             D05.SI  55459934603\n2 OCBC Bank             O39.SI  36748776904\n3 UOB                   U11.SI  31908845153\n4 Singtel               Z74.SI  30399495021\n5 Singapore Airlines    C6L.SI  11030367619\n6 CapitaLand Mall Trust C38U.SI 10479058731\n\n\n\n\n\nExtracting stock prices from Yahoo Finance\nIn this code chunk below, tq_get() is used to get stock prices from Yahoo Finance. The time period for the data was set from 1 January 2022 to 31 December 2023.\n\n\nStock_daily &lt;- company %&gt;%\n  select(Symbol) %&gt;%\n  tq_get(get = \"stock.prices\", \n         from = \"2022-01-01\", \n         to = \"2024-09-22\") \n\n\n\n\nWrangling stock data\nNext, left_join() of dplyr package is used to append Name and marketcap fields of company tibble data frame into Stock_daily tibble data frame by using Symbol as the join field.\n\n\nStock_data &lt;- Stock_daily %&gt;%\n  left_join(company)\n\nJoining with `by = join_by(Symbol)`"
  },
  {
    "objectID": "Rseries/Episode6.html#technical-analysis-tidyquant-methods",
    "href": "Rseries/Episode6.html#technical-analysis-tidyquant-methods",
    "title": "Episode 6: Financial Data Analysis with R",
    "section": "Technical Analysis: tidyquant methods",
    "text": "Technical Analysis: tidyquant methods\n\nTechnical analysis is that traders attempt to identify opportunities by looking at statistical trends, such as movements in a stock’s price and volume. The core assumption is that all known fundamentals are factored into price, thus there is no need to pay close attention to them.\nTechnical analysts do not attempt to measure a security’s intrinsic value. Instead, they use stock charts to identify patterns and trends that suggest what a stock will do in the future.\nPopular technical analysis signals include simple moving averages (SMA), candlestick, Bollinger bands.\n\n\nPlotting Stock Price Line Graph: ggplot methods\nIn the code chunk below, geom_line() of ggplot2 is used to plot the stock prices.\n\n\nStock_data %&gt;%\n  filter(Name == \"UOB\") %&gt;%\n  ggplot(aes(x = date, y = close)) +\n    geom_line() +\n    labs(title = \"DBS Group Holdings Ltd (DBSDF) Daily Stock Price\", \n         y = \"Closing Price\", x = \"\") + \n    theme_tq()\n\n\n\n\n\n\n\n\n\n\n\n\n\nVisualising Stock Price with timetk\nIn the code chunk below, plot_time_series() of timetk package is used plot line graphs with trend lines.\n\n\nStock_data %&gt;%\n  group_by(Name) %&gt;%\n  plot_time_series(date, close,\n                   .facet_ncol   = 2,\n                   .facet_scales = \"free\",\n                   .interactive  = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nTechnical analysis with candlestick\nA candlestick chart (also called Japanese candlestick chart or K-line) is a style of financial chart used to describe price movements of a security, derivative, or currency.\n\nThe code chunkThe Plot\n\n\nIn the code chunk below, geom_candlestick() of tidyquant is used to plot the stock prices of DBS Group.\n\n\nend &lt;- as_date(\"2024-09-22\")\nstart &lt;- end - weeks(4)\nStock_data %&gt;%\n  filter(Name == \"DBS Group\") %&gt;%\n  filter(date &gt;= start - days(2 * 15)) %&gt;%\n  ggplot(aes(x=date, y=close)) +\n  geom_candlestick(aes(open=open,\n                       high=high,\n                       low=low,\n                       close=close)) +\n  labs(title =  \"Daily stock prices of DBS Group\") +\n  coord_x_date(xlim = c(start, end)) + \n  theme_tq()\n\n\n\n\n\n\nWarning: The following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: The following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTechnical analysis with candlestick\n\nThe code chunkThe Plot\n\n\n\nIn the code chunk below, facet_wrap() of ggplot2 package is used to plot the stock prices of the selected six companies.\n\n\n\nend &lt;- as_date(\"2024-09-22\")\nstart &lt;- end - weeks(4)\nStock_data %&gt;%\n  filter(date &gt;= start - days(2 * 15)) %&gt;%\n  ggplot(aes(x=date, y=close, group = Name )) +\n  geom_candlestick(aes(open=open,\n                       high=high,\n                       low=low,\n                       close=close)) +\n  labs(title =  \"Daily stock prices of selected six stocks\") +\n  coord_x_date(xlim = c(start, end)) +\n  facet_wrap(~ Name, \n             ncol = 2, \n             scales = \"free_y\") + \n  theme_tq()\n\n\n\n\n\n\nWarning: The following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: The following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTechnical analysis with moving average\nIn finance, a moving average (MA) is a stock indicator commonly used in technical analysis. The reason for calculating the moving average of a stock is to help smooth out the price data by creating a constantly updated average price.\ntidyquant includes geoms to enable “rapid prototyping” to quickly visualize signals using moving averages and Bollinger bands. The following moving averages are available:\n\nSimple moving averages (SMA)\nExponential moving averages (EMA)\nWeighted moving averages (WMA)\nDouble exponential moving averages (DEMA)\nZero-lag exponential moving averages (ZLEMA)\nVolume-weighted moving averages (VWMA) (also known as VWAP)\nElastic, volume-weighted moving averages (EVWMA) (also known as MVWAP)\n\n\n\nPlotting the 5-day and 15-day simple moving average\n\nThe code chunkThe Plot\n\n\nIn the code chunk below, geom_ma() of tidyquant package is used to overplot two moving average lines on the candlestick chart.\n\n\nStock_data %&gt;%\n  filter(Symbol == \"D05.SI\") %&gt;%\n  filter(date &gt;= start - days(2 * 15)) %&gt;%\n  ggplot(aes(x = date, y = close)) +\n  geom_candlestick(aes(open = open, high = high, low = low, close = close)) +\n  geom_ma(ma_fun = SMA, n = 5, linetype = 5, size = 1.25) +\n  geom_ma(ma_fun = SMA, n = 15, color = \"red\", size = 1.25) + \n    labs(title = \"DBS Group Holdings Ltd Daily Stock Price\", \n         subtitle = \"5 and 15-Day SMA\",\n         y = \"Closing Price\", x = \"\") + \n    coord_x_date(xlim = c(end - weeks(5), end)) + \n                   theme_tq()\n\n\n\nThings you can learn from the code chunk:\n\nThe moving average functions used are specified in SMA() from the TTR package.\n\n\n\n\n\n\nWarning: The following aesthetics were dropped during statistical transformation: open,\nhigh, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: The following aesthetics were dropped during statistical transformation: x,\nopen, high, low, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?"
  },
  {
    "objectID": "Rseries/Episode6.html#plotting-bollinger-band-tidyquant-method",
    "href": "Rseries/Episode6.html#plotting-bollinger-band-tidyquant-method",
    "title": "Episode 6: Financial Data Analysis with R",
    "section": "Plotting Bollinger Band: tidyquant method",
    "text": "Plotting Bollinger Band: tidyquant method\nA Bollinger Band is a technical analysis tool defined by a set of trendlines plotted two standard deviations (positively and negatively) away from a simple moving average (SMA) of a security’s price, but which can be adjusted to user preferences.\nIn tidyquant, bollinger band can be plotted by using geom_bbands(). Because they use a moving average, the geom_bbands() works almost identically to geom_ma. The same seven moving averages are compatible. The main difference is the addition of the standard deviation, sd, argument which is 2 by default, and the high, low and close aesthetics which are required to calculate the bands.\n\nPlotting Bollinger Bands: tidyquant method\n\nThe code chunkThe Plot\n\n\n\nIn the code chunk below, geom_bbands() of tidyquant package is used to plot bollinger bands on closing stock prices of DBS Group.\n\n\n\nStock_data %&gt;%\n  filter(Name == \"DBS Group\") %&gt;% \n  ggplot(aes(x=date, y=close))+\n  geom_line(size=0.5)+\n  geom_bbands(aes(\n    high = high, low = low, close = close), \n    ma_fun = SMA, sd = 2, n = 5,\n    size = 0.75, color_ma = \"royalblue4\", \n    color_bands = \"red1\")+\n    coord_x_date(xlim = c(\"2022-01-01\",\n                          \"2022-06-30\"), \n                 expand = TRUE)+\n    labs(title = \"DBS Group Holdings Ltd Daily Stock Price\",\n         subtitle = \"dotted red lines = bollinger bands\",\n         x = \"Date\", y =\"Close Price\") +\ntheme(legend.position=\"none\")\n\n\n\nThings you can learn from the code chunk:\n\ngeom_bbands() plots a range around a moving average typically two standard deviations up and down. The moving average functions used are specified in SMA() from the TTR package.\n\n\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The following aesthetics were dropped during statistical transformation: high,\nlow, close, and y.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\nWarning: The following aesthetics were dropped during statistical transformation: high,\nlow, and close.\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?"
  },
  {
    "objectID": "Rseries/Episode6.html#performance-analysis-with-tidyquant",
    "href": "Rseries/Episode6.html#performance-analysis-with-tidyquant",
    "title": "Episode 6: Financial Data Analysis with R",
    "section": "Performance Analysis with tidyquant",
    "text": "Performance Analysis with tidyquant\nFinancial asset (individual stocks, securities, etc) and portfolio (groups of stocks, securities, etc) performance analysis is a deep field with a wide range of theories and methods for analyzing risk versus reward. The PerformanceAnalytics package consolidates functions to compute many of the most widely used performance metrics.\ntidquant integrates this functionality so it can be used at scale using the split, apply, combine framework within the tidyverse. Two primary functions integrate the performance analysis functionality:\n\ntq_performance() implements the performance analysis functions in a tidy way, enabling scaling analysis using the split, apply, combine framework.\ntq_portfolio() provides a useful tool set for aggregating a group of individual asset returns into one or many portfolios.\n\n\nTime-based returns analysis with tidyquant\nAn important concept of performance analysis is based on the statistical properties of returns (not prices). In the code chunk below, tq_transmute() to compute the monthly returns of the six stocks\n\n\nStock_monthly_returns &lt;- Stock_data %&gt;%\n    group_by(Name) %&gt;%\n  tq_transmute(select = adjusted,\n               mutate_fun = periodReturn, \n               period = \"monthly\",\n               type = \"arithmetic\")\nStock_monthly_returns\n\n\n\n\n\n\n\n\nName\ndate\nmonthly.returns\n\n\n\n\nDBS Group\n2022-01-31\n0.0734980\n\n\nDBS Group\n2022-02-28\n-0.0392044\n\n\nDBS Group\n2022-03-31\n0.0594322\n\n\nDBS Group\n2022-04-29\n-0.0435616\n\n\nDBS Group\n2022-05-31\n-0.0776210\n\n\nDBS Group\n2022-06-30\n-0.0407238\n\n\nDBS Group\n2022-07-29\n0.0603098\n\n\nDBS Group\n2022-08-31\n0.0472114\n\n\nDBS Group\n2022-09-30\n0.0242332\n\n\nDBS Group\n2022-10-31\n0.0242589\n\n\nDBS Group\n2022-11-30\n0.0397846\n\n\nDBS Group\n2022-12-30\n-0.0360898\n\n\nDBS Group\n2023-01-31\n0.0551296\n\n\nDBS Group\n2023-02-28\n-0.0452639\n\n\nDBS Group\n2023-03-31\n-0.0342406\n\n\nDBS Group\n2023-04-28\n0.0072186\n\n\nDBS Group\n2023-05-31\n-0.0644846\n\n\nDBS Group\n2023-06-30\n0.0399340\n\n\nDBS Group\n2023-07-31\n0.0872739\n\n\nDBS Group\n2023-08-31\n-0.0141973\n\n\nDBS Group\n2023-09-29\n0.0102103\n\n\nDBS Group\n2023-10-31\n-0.0234840\n\n\nDBS Group\n2023-11-30\n-0.0196027\n\n\nDBS Group\n2023-12-29\n0.0526150\n\n\nDBS Group\n2024-01-31\n-0.0457946\n\n\nDBS Group\n2024-02-29\n0.0454830\n\n\nDBS Group\n2024-03-28\n0.0810081\n\n\nDBS Group\n2024-04-30\n0.0815819\n\n\n\n\n\n\n\n\nVisualising time-based returns\nSince the output is in tibble data frame format, we can visualise the returns easily by using appropriate ggplot2 functions.\n\nThe code chunkThe Plot\n\n\n\n\nStock_monthly_returns %&gt;%\n  ggplot(aes(x = date, \n             y = monthly.returns, \n             fill = Name)) +\n  geom_col() +\n  geom_hline(yintercept = 0, \n             color = palette_light()[[1]]) +\n  scale_y_continuous(labels = scales::percent) +\n  labs(title = \"Monthly returns of the six selected stocks\",\n       subtitle = \"\",\n       y = \"Monthly Returns\", x = \"\") + \n  facet_wrap(~ Name, ncol = 3, scales = \"free_y\") +\n  theme_tq() + \n  scale_fill_tq()"
  },
  {
    "objectID": "Rseries/Episode6.html#portfolio-analysis-with-tidyquant",
    "href": "Rseries/Episode6.html#portfolio-analysis-with-tidyquant",
    "title": "Episode 6: Financial Data Analysis with R",
    "section": "Portfolio Analysis with tidyquant",
    "text": "Portfolio Analysis with tidyquant\nAssuming that we have S$100,000 investment in the three local banks since 1st January 2020 until 31th December 2023 and we would like to analyse how our money is growing.\nCode chunk below will be used to import SGBank.csv into R environment.\n\n\nSGBank &lt;- read_csv(\"data/SGBank.csv\")\n\nRows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Name, Symbol\ndbl (1): marketcap\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nNext, tq_get() will be used to extract and download the stock prices from Yahoo Finance.\n\n\nSGBank_daily &lt;- SGBank %&gt;%\n  select(Symbol) %&gt;%\n  tq_get(get = \"stock.prices\", \n         from = \"2020-01-01\", \n         to = \"2024-09-22\") \n\n\n\nComputing returns of individual bank\nIn the code chunk below, tq_transmute() is used to compute the monthly returns for each bank.\n\n\nSGBank_returns_monthly &lt;- SGBank_daily %&gt;%\n  group_by(Symbol) %&gt;%\n  tq_transmute(select = adjusted,\n               mutate_fun = periodReturn,\n               period = \"monthly\",\n               col_rename = \"Ra\")\n\n\nThe code chunk below can then be used to display the first 10 records.\n\n\nkable(head(SGBank_returns_monthly, \n           n=10))\n\n\n\n\n\n\n\n\nSymbol\ndate\nRa\n\n\n\n\nD05.SI\n2020-01-31\n-0.0283414\n\n\nD05.SI\n2020-02-28\n-0.0496651\n\n\nD05.SI\n2020-03-31\n-0.2297802\n\n\nD05.SI\n2020-04-30\n0.0748521\n\n\nD05.SI\n2020-05-29\n0.0087394\n\n\nD05.SI\n2020-06-30\n0.0683099\n\n\nD05.SI\n2020-07-30\n-0.0495193\n\n\nD05.SI\n2020-08-31\n0.0645863\n\n\nD05.SI\n2020-09-30\n-0.0459991\n\n\nD05.SI\n2020-10-30\n0.0220996\n\n\n\n\n\n\n\n\nComputing the combined returns\nIn the code chunk below, tq_portfolio() is used to compute the combined returns of the three local banks.\n\n\nwts &lt;- c(0.4, 0.3, 0.3)\nporfolio_returns_monthly &lt;- SGBank_returns_monthly %&gt;%\n  tq_portfolio(assets_col = Symbol,\n               returns_col = Ra,\n               weights = wts,\n               col_rename = \"Ra\")\n\n\nThe code chunk below can then be used to display the first 10 records.\n\n\nkable(head(porfolio_returns_monthly, \n           n=10))\n\n\n\n\n\n\n\n\ndate\nRa\n\n\n\n\n2020-01-31\n-0.0282455\n\n\n2020-02-28\n-0.0399556\n\n\n2020-03-31\n-0.2087409\n\n\n2020-04-30\n0.0571420\n\n\n2020-05-29\n-0.0160664\n\n\n2020-06-30\n0.0572741\n\n\n2020-07-30\n-0.0470620\n\n\n2020-08-31\n0.0440949\n\n\n2020-09-30\n-0.0354334\n\n\n2020-10-30\n0.0084290\n\n\n\n\n\n\n\n\nVisualising the combined portfolio returns\n\nThe code chunkThe Plot\n\n\nIn the code chunk below, ggplot2 functions are used to prepare a vidualisation showing the combined portfolio returns.\n\n\nggplot(data = porfolio_returns_monthly,\n       aes(x = date, y = Ra)) +\n  geom_bar(stat = \"identity\",\n           fill = palette_light()[[1]]) +\n  labs(title = \"Porfoli Returns\",\n       subtitle = \"40% DBS, 30% OCBC and 30% UOB\",\n       caption = \"Shows an above zero trend meaning positive retuns\",\n       x = \"\", y = \"Monthly Returns\") +\n  geom_smooth(method = \"lm\") +\n  theme_tq() + \n  scale_color_tq() +\n  scale_y_continuous(labels = scales::percent)\n\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComputing investment growth\nMost of the time, we also want to see how our $100,000 initial investment is growing. This is simple with the underlying Return.portfolio argument, wealth.index = TRUE. All we need to do is add these as additional parameters to tq_portfolio()!\n\n\nwts &lt;- c(0.4, 0.3, 0.3)\nportfolio_growth_monthly &lt;- SGBank_returns_monthly %&gt;%\n  tq_portfolio(assets_col = Symbol,\n               returns_col = Ra,\n               weights = wts,\n               col_rename = \"investment.growth\",\n               wealth.index = TRUE) %&gt;%\n  mutate(investment.growth = investment.growth * 100000)\n\n\n\n\nVisualising the growth\n\nThe code chunkThe Plot\n\n\nThe code chunk below will be used to plot the investment growth trends.\n\n\nggplot(data = portfolio_growth_monthly,\n       aes(x = date, y = investment.growth)) +\n    geom_line(size = 1, color = palette_light()[[1]]) +\n    labs(title = \"Portfolio Growth\",\n         subtitle = \"40% DBS, 30% OCBC, and 30% UOB\",\n         caption = \"Now we can really visualize performance!\",\n         x = \"\", y = \"Portfolio Value\") +\n    geom_smooth(method = \"loess\") +\n    theme_tq() +\n    scale_color_tq() +\n    scale_y_continuous(labels = scales::dollar)\n\n\n\n\n\n\n`geom_smooth()` using formula = 'y ~ x'"
  }
]